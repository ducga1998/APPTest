{"version":3,"sources":["webpack://WebBuilder/./src/elements/Heading.tsx"],"names":["DIV","styled","div","CreateElement","initialState","Heading","e","props","Event","onmousedown","container","setStateSync","text","ElementSpan","innerText","data","element","current","componentDidMount","innerHTML","state","componentDidUpdate","nextProps","render","console","log","id","type","HandChange","bind","listComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AAEA;AACA;AAiBA,MAAMA,MAAM,yDAAAC,CAAOC,GAAK,EAAxB;AACA,+DAAe,kEAAAC,CAAc;AAACC,gBAAa;AAAd,CAAd,oBAGX,MAAMC,OAAN,SAAsB,+CAAtB,CAAgE;AAAA;AAAA;;AAAA,qCA+B1B,iDA/B0B;;AAAA,uCAgClDC,CAAD,IAAO;AACnB,WAAKC,KAAL,CAAWC,KAAX,CAAiBC,WAAjB;AACG,WAAKC,SAAL,CAAeC,YAAf,CAA4B;AAACC,cAAM,KAAKC,WAAL,CAAiBC;AAAxB,OAA5B;AAEH,KApC+D;;AAAA,wCAqCnD,MAAM;AACf,WAAKJ,SAAL,CAAeC,YAAf,CAA4B;AAACI,cAAK;AAC9BH,gBAAO,KAAKC,WAAL,CAAiBC,SAAjB,GAA6B;AADN;AAAN,OAA5B,EADe,CAKf;AACH,KA3C+D;AAAA;;AAYhE,MAAIJ,SAAJ,GAAe;AACX,WAAO,KAAKH,KAAL,CAAWG,SAAlB;AACH;;AACD,MAAIK,IAAJ,GAAY;AACR,WAAO,KAAKR,KAAL,CAAWQ,IAAlB;AACH;;AACD,MAAIF,WAAJ,GAAkB;AACd,WAAO,KAAKG,OAAL,CAAaC,OAApB;AACH;;AACDC,sBAAoB;AAChB,SAAKL,WAAL,CAAiBM,SAAjB,GAA6B,KAAKT,SAAL,CAAeU,KAAf,CAAqBL,IAArB,CAA0BH,IAAvD;AAEN;;AACES,qBAAmBC,SAAnB,EAEA;AAEI,SAAKT,WAAL,CAAiBM,SAAjB,GAA4B,KAAKT,SAAL,CAAeU,KAAf,CAAqBL,IAArB,CAA0BH,IAAtD;AACN;;AAeEW,WAAQ;AACJC,YAAQC,GAAR,CAAY,wBAAZ,EAAsC,KAAKlB,KAAL,CAAWQ,IAAjD;AACA,UAAM;AAAEH,UAAF;AAASF,eAAT;AAAoBK,UAApB;AAA0BW,QAA1B;AAA6BC;AAA7B,QAAqC,KAAKpB,KAAhD;AACAiB,YAAQC,GAAR,CAAY,mBAAZ,EAAkC,KAAKlB,KAAvC;AACA,WAAO,oDAAC,GAAD,eAAU,KAAKA,KAAL,CAAWC,KAArB;AAA4B,iBAAY,IAAxC;AAA6C,UAAKkB;AAAlD,QACL,sEAAO;AAAM,WAAM,KAAKV,OAAjB;AACD,eAAU,KAAKY,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CADT;AAED,cAAS,KAAKD,UAAL,CAAgBC,IAAhB,CAAqB,IAArB,CAFR;AAID,uBAAiB;AAJhB,MAAP,CADK,CAAP;AASH;;AA1D+D,CAHrD,0CAKW;AAClBjB,QAAO;AADW,CALX,wCAQS,MAAM;AACtB,SAAO;AACHkB,mBAAgB,CACZ,2DADY;AADb,GAAP;AAKH,CAdU,UAAf,E","file":"5.bundle.js","sourcesContent":["import * as React from 'react'\nimport UIElement from \"../interfaces/UIElement\";\nimport { Provider, Subscribe ,Container} from 'unstated-x'\nimport { CreateElement } from '../lib/element';\nimport { RefObject, Component } from 'react';\nimport UIInput from '../ui/control/UIInput';\nimport styled from  'styled-components'\n\ninterface Data {\n    Event:{\n        onmousedown:Function\n    },\n    container: any,\n    text :string,\n    data: Array<{\n        id:number,\n        type:string,\n        text : any\n    }>,\n    id : any,\n    type : any,\n    abc:any\n}\nconst DIV = styled.div ``\nexport default CreateElement({initialState:{\n\n}})\n(   class Heading extends React.Component<Data> implements UIElement{\n      \n    static defaultProps = {\n        text:  'HEADING 1'\n    }\n    static inspector =  () => {\n        return {\n            listComponent : [\n                UIInput ,\n            \n        ]}\n    }\n    get container(){\n        return this.props.container;\n    }\n    get data () {\n        return this.props.data\n    }\n    get ElementSpan() {\n        return this.element.current;\n    }\n    componentDidMount() {\n        this.ElementSpan.innerHTML = this.container.state.data.text\n      \n\t}\n    componentDidUpdate(nextProps: {\n\t\ttext: string\n\t}) {\n       \n        this.ElementSpan.innerHTML =this.container.state.data.text;\n\t}\n    element : RefObject<HTMLDivElement> = React.createRef();\n    handClick  = (e) => {\n    \tthis.props.Event.onmousedown();\n        this.container.setStateSync({text :this.ElementSpan.innerText})\n       \n    }\n    HandChange = () => {\n        this.container.setStateSync({data:{\n            text : this.ElementSpan.innerText + \"\"\n        }\n    })\n        // this.data.filter(item => item.id == this.props.id)[0].text = this.ElementSpan.innerText\n    }\n    \n    render(){\n        console.log(\" data props to Element\", this.props.data)\n        const { text , container ,data ,id,type} = this.props;\n        console.log(\"props to elmement\" , this.props)\n        return <DIV  {...this.props.Event} className = \"h1\" id ={id}>\n          <h1 >  <span ref={(this.element)}\n                onInput={ this.HandChange.bind(this)}\n                onBlur={ this.HandChange.bind(this)}\n               \n                contentEditable={true} \n                />\n                </h1>\n            </DIV>\n    }\n}\n)\n"],"sourceRoot":""}